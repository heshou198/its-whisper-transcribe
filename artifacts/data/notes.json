[
    {
        "title": "\"Introduction to MIT's Course 600: Computer Science and Programming\"",
        "content": "- The content is provided under a Creative Commons license.\n- The course, 600, is also known as Introduction to Computer Science and Programming.\n- Course lecturers are Professor Eric Grimson and Professor John Guttag, who have been lecturing for 25 and 30 years respectively.\n- Study of computation is seen as very important.\n- Course goals: Ability to understand and implement the concepts and tools of computational thinking; to think like a computer scientist.\n- Strategic course goals: Preparing undergraduate students interested in Course 6, especially beginners in programming; enabling students not majoring in Course 6 to write and read small pieces of code; understanding the role computation can play in solving technical problems; building the confidence and competence for computational problem-solving.\n- The course is mainly beneficial for students who are new to programming. \n- Students who have extensive programming experience may not benefit as much from the course.\n- Key skills for students to acquire: Using computational thinking to write small-scale programs; understanding programs written by others; understanding the features, limits and costs of computation.\n- Understanding the limitations of computation is seen as crucial."
    },
    {
        "title": "\"Mapping Scientific Problems into a Computational Framework: An Introductory Course\"",
        "content": "- The last tactical skill acquired from course: ability to map scientific problems into a computational framework\n- Students will learn to take a problem description and map it into something computational\n- The course aims to provide the foundation for students to translate problems from various domains into computational language\n- Discussion on what computation is and how to build tools related to it is forthcoming in the course\n- Course administration details:\n   - Two hours of lecture a week\n   - Class timing: Tuesdays and Thursdays at 11\n   - One hour of recitation a week on Fridays\n   - Nine hours a week of class work outside the classroom\n   - Work involves primarily solving problem sets through programming in Python\n   - Problem sets vary in difficulty level, increasing as the term progresses\n   - Course will make heavy use of libraries or code written by other people."
    },
    {
        "title": "\"Course Overview and Expectations\"",
        "content": "- Understand the course materials thoroughly, including familiarizing with course codes rather than just writing from scratch.\n- Quizzes: Two quizzes scheduled; exact dates will be shared on the course website.\n- Conflicting Schedule: If any student faces conflict with the quiz schedule, communicate immediately.\n- Special Needs: Any pre-existing, documented special needs must be noted to the course administrators at least two weeks before a quiz.\n- Quizzes are open book/notes since the course isn\u2019t about memorization but thinking process.\n- Grading Distribution: Problem sets contribute 55% of the total grade, whereas quizzes contribute the remaining 45%. The final exam is also included in quizzes' 45%.\n- Challenge Level of Problem Sets: Problem sets are not designed to be difficult but to aid in learning. Assistance is available if needed.\n- Platform: The course will primarily be conducted in a paperless format via the course website. Recitations to be signed up through the course website.\n- Recitations: Held on Fridays; potential times are 9, 10, 11, 12, 1, and 2. Changes may occur based on course size."
    },
    {
        "title": "\"Course Guidelines: Sign Up, Optional Textbook, Attendance, and the Importance of Note-Taking\"",
        "content": "- Students are required to sign up for recitation times that suit them, but course leaders reserve the right to adjust as needed for balance.\n- Textbooks are not required for the course; one suggested piece for Python is available for those who feel the need for one.\n- There are no specific texts that the course heavily relies on.\n- Attendance is not mandatory, although participation and engagement are encouraged.\n- Material covered in the course may not all be found in the assigned readings; understanding of lecture and reading content is expected.\n- Questions that pertain to content covered in readings or lectures might not be given priority by TAs.\n- Responsible behavior from students is expected, and the course leaders will reciprocate.\n- Class notes will not be distributed; students are encouraged to take their own notes.\n- Studies have shown that students retain knowledge better when they write down notes, even if they never review them. Note-taking is beneficial as it exercises both halves of the brain."
    },
    {
        "title": "\"Importance of Class Participation, Note Taking, and Attendance in Lectures and Recitations\"",
        "content": "- Most lectures will have a handout, mainly composed of code examples.\n- Handout codes may not make sense outside the context of the lecture.\n- Lecturers encourage using handouts as a basis for personal notes.\n- Teaching staff's main role is to aid students' learning process.\n- Students are advised to seek help from staff when struggling conceptually. \n- Staff is not responsible for answering questions easily answered by lecture attendance, course readings, or a simple Google search.\n- The semester's classes are being recorded for OpenCourseWare.\n- Those who do not wish to be on camera should sit in the last three rows.\n- Recitations form an integral part of the course, with attendance expected.\n- Material unique to recitations, not available in lectures or readings, will be covered. \n- Ground rules need to be clearly understood by all."
    }
]