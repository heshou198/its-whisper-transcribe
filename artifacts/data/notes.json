[
    {
        "title": "\"Introduction to MIT's Course 600: Computer Science and Programming\"",
        "content": "- Lecture on Introduction to MIT's Course 600: Computer Science and Programming\n- Professors Eric Grimson and John Guttag are teaching the course\n- Course is taken seriously and aims to help everyone learn about computation\n- Three main topics for lecture: administrivia, goals of the course, and concepts and tools of computational thinking\n- Strategic goals of the course: prepare freshmen and sophomores for majoring in Course 6, help non-majoring students feel confident in coding, provide understanding of the role of computation in technical problems, and prepare students for jobs and internships\n- Course is for students with little or no prior programming experience\n- Overqualified students should talk to the professors for alternatives\n- Tactical goals of the course: acquire skills in computational thinking, understand and write small scale programs, use vocabulary of computational tools, read and analyze programs written by others, understand the capabilities and limitations of computation and its costs."
    },
    {
        "title": "\"Mapping Scientific Problems into a Computational Framework: An Introductory Course\"",
        "content": "- Ability to map scientific problems into a computational framework\n- Learn to read, write, and understand what can and cannot be done in computation\n- Take a description of a problem from another domain and map it into the domain of computation\n- Course administration: \n  - 2 hours of lecture per week on Tuesdays and Thursdays at 11\n  - 1 hour of recitation per week on Fridays\n  - 9 hours of outside class work, primarily working on problem sets\n  - Problem sets involve programming in Python\n  - Difficulty of problem sets will increase gradually\n  - Heavy use of libraries or pre-existing code"
    },
    {
        "title": "\"Course Overview and Expectations\"",
        "content": "- Two quizzes during the term, dates already scheduled (October 2nd and November 4th)\n- Check the course website for quiz dates and any conflicts\n- If there is a conflict, see the instructor to arrange something ahead of time\n- If there is an MIT-documented special need for taking quizzes, see the instructor well in advance (at least two weeks before the quiz)\n- Quizzes are open book and open note, testing your ability to think\n- Grades: 55% from problem sets, 45% from quizzes (10%, 15%, and 20%)\n- Final exam during final period\n- First problem set (problem set 0) has already been posted, easy and to familiarize with Python\n- First problem set will be posted shortly, somewhat boring but will become more interesting\n- Problem sets are not intended to be lethal, they are to help you learn\n- Seek help if you don't understand a problem set, either psychiatric help or a TA\n- The goal is for problem sets to be straightforward if you start down the right path\n- This should not be a grueling test, it's meant to help you learn\n- Ask for help from the instructors or TAs if needed\n- The course is primarily paperless, check the website for all necessary information\n- Fill out a form on the website to sign up for a recitation on Fridays (9, 10, 11, 12, 1, and 2), one may be dropped depending on course size"
    },
    {
        "title": "\"Course Guidelines: Sign Up, Optional Textbook, Attendance, and the Importance of Note-Taking\"",
        "content": "- Sign up for recitation that fits your schedule\n- Textbook is not required, but there is a recommended one for Python\n- Attendance is not mandatory, but it is encouraged \n- A lot of material will be covered that is not in the textbook \n- TAs may not have patience with questions covered in the readings or lectures \n- Students are expected to behave responsibly \n- Class notes will not be handed out \n- Taking notes is valuable for learning, even if not looked at later."
    },
    {
        "title": "\"Importance of Class Participation, Note Taking, and Attendance in Lectures and Recitations\"",
        "content": "- Handouts distributed for most lectures, mainly code examples\n- Notes may not make sense outside of lecture\n- Recommended to use notes to take personal annotations\n- No class notes provided to encourage individual learning process\n- Instructors and staff are there to help students learn\n- Encouraged to ask for assistance when struggling or uncertain\n- TAs available for help but have less patience for questions that could be answered through reading, attending lecture, or using Google\n- Class being videotaped for OpenCourseWare\n- Students who don't want their image recorded should sit in the back three rows\n- Recitations are important and cover material not in lectures or reading\n- Attendance in recitations expected"
    }
]